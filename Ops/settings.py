"""
Django settings for Ops project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import configparser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_5vd^@ltsdvdde79rg@k9&@8z%p8irgmh4ql%flqi*zy00j#20'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = False
DEBUG = True

ALLOWED_HOSTS = ['xxxxxxx', '172.29.0.19']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'Ops',
    'mirrors',
    'user',
    'asset',
    'opslog',
    'opstools',
    'api',
    'release',
    # 'static',
    'mchange',
    'celery_demo',
    'opscontainer',
    'continuous_deployment',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Ops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'Ops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'bing',
        # 'USER': 'root',
        # 'PASSWORD': 'mysql',
        'USER': 'root',
        'PASSWORD': 'DEV_mysql2019',
        # 'HOST': 'localhost',
        'HOST': '192.168.0.107',
        'PORT': '3306',

    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#session timeout
SESSION_COOKIE_AGE = 60*60
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True
#是否需要处理utc和本地时间差的区别
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

#STATIC_ROOT = os.path.join(BASE_DIR, "static/")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

#celery
BROKER_URL = 'redis://xxxxxxx:6379'
CELERY_RESULT_BACKEND = 'redis://xxxxxxx:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'

# logInfo
config = configparser.ConfigParser()
config.read(os.path.join(BASE_DIR, 'ops.conf'))
# print(os.path.join(BASE_DIR, 'ops.conf'))
LOG_DIR = os.path.join(BASE_DIR, 'logs')
LOG_LEVEL = config.get('logInfo', 'log')

#仓库用户名和密码
HARBOR_NAME = "ciadmin"
HARBOR_PASSWD = "Qwer@1314"
HARBOR_DOMAIN = "reg.xxxxxx.net"
#项目
#PROJCT_PARAM = "curl -u \"xxxx:xxxx\" -X GET -H \"Content-Type: application/json\"   \"https://reg.xxxxxx.net/api/projects\" -k -s"
#镜像仓库
#MIRROR_WAREHOUSE_HEAD = "curl -u \"xxxx:xxxx\" -X GET -H \"Content-Type: application/json\" \"https://reg.xxxxxx.net/api/repositories?project_id="
#MIRROR_WAREHOUSE_END = "&page=1\" -k -s"
#镜像标签
#MIRROR_TAGS_HEAD = "curl -u \"xxxx:xxxx\" -X GET -H \"Content-Type: application/json\"   \"https://reg.xxxxxx.net/api/repositories/"
#MIRROR_TAGS_MIDDLE = "%2F"
#MIRROR_TAGS_END = "/tags\" -k -s"

#异步执行结果目录
ANSY_RET_DIR = os.path.join(BASE_DIR, "retinfo")
#重启容器目录
CONTAINER_RESTART_DIR = os.path.join(BASE_DIR, "containerinfo")

#uat和test环境容器的比较
UAT_HOSTS= [["uatconsul","uat-pay-1", "uat-account-1"],["uatconsul","uatapp2", "uat-account-2", "uat-pay-2"]]
#UAT_HOSTS = ["uatconsul", "uatapp2"]
TEST_HOSTS = [["testapp","testapp2"]]

#dingtalk machine info
#DINGTALK_WEBHOOK_TOKEN = "https://oapi.dingtalk.com/robot/send?access_token=354d9dccf4d755b72a7cd55268f9587a21734d612e0e04afca1c26dcd21076f8"
DINGTALK_WEBHOOK_TOKEN = "https://oapi.dingtalk.com/robot/send?access_token=637b48f80e76e4b0bbd11623cee7d490a157060902b5598ccfd03c5bd7248894"

#email_info
SEND_ACCOUNT = "pay-opadmin@xxxxxxxxx.com"
UCREATE_USER_MODEL = "xxxxxxxOps平台欢迎%s的加入.       \n\
          平台访问地址 : http://xxxxxxx:8081/login/ \n\
          您的账号 ：%s          \n\
          您的密码：%s            \n"
ACCOUNT_PASSWD = "Transs@18"

import datetime
YEAR_MONTH = datetime.datetime.now().strftime("%Y%m")
#file upload path
UPFILE_PATH = os.path.join(BASE_DIR, "upfile")
if not os.path.exists(UPFILE_PATH):
    os.makedirs(UPFILE_PATH)
JSON_DATA_DIR =  os.path.join(UPFILE_PATH, "host_json_data", YEAR_MONTH)
#JSON_DATA_DIR =  os.path.join(UPFILE_PATH, "host_json_data")
if not os.path.exists(JSON_DATA_DIR):
    os.makedirs(JSON_DATA_DIR)

#ec2 resource used condition dir
EC2_USED_CONDITION_DIR = os.path.join(UPFILE_PATH, "ec2usedcondition", YEAR_MONTH)
if not os.path.exists(EC2_USED_CONDITION_DIR):
    os.makedirs(EC2_USED_CONDITION_DIR)



LOCAL_VISTOR_IP = "http://172.29.0.19:8081"

#Jenkins info
#JEKINS_URL = "http://10.200.110.15:8080/"
JEKINS_URL = "http://172.29.0.251:18081/jenkins/"
USER_ID = "weihengjun"
#TOKEN_ID = "64cab52ad8418c85672cdd4cd418f198"
TOKEN_ID = "72f5d69a46c505fbce1b111f86930bce"

#Gitlab info
TOKEN_INFO = "-RmNMSJsDimGK_NzrdEr"
GITLAB_URL = "https://gitconfig.xxxxxx.net"

#django-crontab set
CRONJOBS = [
    # 表示每天1：01执行
    ('*/30 * * * *', 'asset.views.get_ec2_info'),
    ('*/40 1 * * *', 'asset.views.cront_get_alb_info_interface'),
    #获取ec2的网络以及cpu消耗
    ('30 0 * * 1', 'asset.views.ec2_network_cpu_used_condition'),
]
